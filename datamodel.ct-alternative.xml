<?xml version="1.0" encoding="UTF-8"?>
<itop_design xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.0">
  <constants>
  </constants>
  <classes>

<!--
**************************************************
This is an attempt to create a generic dependency/redundancy object

iTop has redundancy for some things like power supplies but does not offer this for things like 
network connections. Instead of trying to add this function to each class, the idea here is to create a 
Alternative class. The Alternative object then identifies all of the candidates for meeting a specific
requirement and how many have to be up to to consider the requirement met. For example:

     NetworkConnect1 (Alternative, 1 required)
			NetworkDevice 1
			NetworkDevice 2
			NetworkDevice 3
	
     NetworkConnect2 (Alternative, 1 required)
			NetworkDevice 4
			NetworkDevice 5
			NetworkDevice 6
			
     ISCSIConnect1 (Alternative, all required)
			NetworkDevice A
			NetworkDevice B
			NetworkDevice C
	
     ISCSIConnect2 (Alternative, 2 required)
			NetworkDevice D
			NetworkDevice E
			NetworkDevice F

You then implement this by adding the Alternatives to the FunctionalCI that needs them; all Alternatives must be met for the requirement to be met

	Server X
		NetworkConnect1
		ISCSIConnect2
		
	Server Y
		NetworkConnect2
		ISCSIConnect1

So Server X is up if both Alternatives NetworkConnect1 and ISCSIConnect2 are up. That's equivalent to: 

		Server X is up if 
				(any one of NetworkDevice 1, NetworkDevice 2, or NetworkDevice 3 is up) 
				AND 
				(any two of NetworkDevice D, NetworkDevice E, or NetworkDevice F are up).
				
		Similarly, Server Y is up if
				(any one of NetworkDevice 4, NetworkDevice 5, or NetworkDevice 6 is up)   
				AND 
				(all of NetworkDevice A, NetworkDevice B, and NetworkDevice C are up).
			
Because the Alternative is composed of FunctionalCI objects and FunctionalCI object in turn uses Alternatives to determine if the FunctionalCi 
is up or down, you can basically make any FunctionalCI dependent on any other collection FunctionalCIs as specified by the redundancy in the Alternative.		
**************************************************
-->

<!--

**************************************************
The Alternative class documents a generic redundant alternative
**************************************************
-->

<class id="Alternative" _delta="define">
      <parent>cmdbAbstractObject</parent>
      <properties>
        <category>bizmodel,searchable,configmgmt</category>
        <abstract>false</abstract>
        <key_type>autoincrement</key_type>
        <db_table>alternatives</db_table>
        <db_key_field>id</db_key_field>
        <db_final_class_field/>
        <naming>
          <attributes>
            <attribute id="name"/>
            <attribute id="redundancyType"/>
          </attributes>
        </naming>
	<display_template/>
        <icon>images/alternative.png</icon>
      </properties>
      <fields>

        <field id="name" xsi:type="AttributeString">
          <sql>name</sql>
          <default_value/>
          <is_null_allowed>false</is_null_allowed>
        </field>

        <field id="org_id" xsi:type="AttributeExternalKey">
          <sql>org_id</sql>
          <target_class>Organization</target_class>
          <is_null_allowed>false</is_null_allowed>
          <on_target_delete>DEL_MANUAL</on_target_delete>
        </field>
        <field id="organization_name" xsi:type="AttributeExternalField">
          <extkey_attcode>org_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
		
<!--
			**************************************************
			This is the redundancy for all attached FunctionalCIs
			**************************************************
-->

        <field id="redundancyType" xsi:type="AttributeRedundancySettings">
          <sql>redundancy</sql>
          <relation_code>impacts</relation_code>
          <from_class>FunctionalCI</from_class>
          <neighbour_id>functionalcis</neighbour_id>
          <enabled>true</enabled>
          <enabled_mode>user</enabled_mode>
          <min_up>1</min_up>
          <min_up_type>count</min_up_type>
          <min_up_mode>user</min_up_mode>
        </field>
		
<!--
			**************************************************
			This links to all the FunctionalCIs dependent on this Alternative
			**************************************************
-->

        <field id="dependent_list" xsi:type="AttributeLinkedSetIndirect">
          <linked_class>lnkDependentCIToAlternative</linked_class>
          <ext_key_to_me>alternative_id</ext_key_to_me>
          <count_min>0</count_min>
          <count_max>0</count_max>
          <ext_key_to_remote>functionalci_id</ext_key_to_remote>
          <duplicates/>
        </field>
		
<!--
			**************************************************
			This links the FunctionalCIs that are evaluated as part of this alternative
			**************************************************
-->

        <field id="component_list" xsi:type="AttributeLinkedSetIndirect">
          <linked_class>lnkAlternativeToFunctionalCI</linked_class>
          <ext_key_to_me>alternative_id</ext_key_to_me>
          <count_min>0</count_min>
          <count_max>0</count_max>
          <ext_key_to_remote>functionalci_id</ext_key_to_remote>
          <duplicates/>
        </field>

		<!--
			**************************************************
			This is used to indicate whether a redundancy is auto failover or manual
			**************************************************
-->

	<field id="automanual" xsi:type="AttributeEnum" _delta="define">
          <values>
             <value id="A">Automatic</value>
             <value id="M">Manual</value>
          </values>
          <sql>automanual</sql>
          <default_value>Automatic</default_value>
          <is_null_allowed>true</is_null_allowed>
          <display_style>radio_horizontal</display_style>
        </field>


      </fields>
      <presentation>
        <details>
          <items>

            <item id="dependent_list">
              <rank>20</rank>
            </item>
            <item id="component_list">
              <rank>20</rank>
            </item>
            <item id="name">
              <rank>50</rank>
            </item>
            <item id="org_id">
              <rank>60</rank>
            </item>
			<item id="automanual">
              <rank>70</rank>
			</item>
			
	     </items>
        </details>
        <search>
	      <items>
            <item id="name">
              <rank>50</rank>
            </item>
            <item id="org_id">
              <rank>60</rank>
            </item>
			<item id="automanual">
              <rank>70</rank>
	        </item>
	      </items>
        </search>
        <list>
          <items>
            <item id="name">
              <rank>50</rank>
            </item>
            <item id="org_id">
              <rank>60</rank>
            </item>
			<item id="automanual">
              <rank>70</rank>
	        </item>
          </items>
        </list>
      </presentation>
<methods>
        <method id="GetRelationQueries">
          <comment>/**
	 * Placeholder for backward compatibility (iTop &lt;= 2.1.0)
	 * in case an extension attempts to redefine this function...	 
	 */</comment>
          <static>true</static>
          <access>public</access>
          <type>Overload-DBObject</type>
          <code><![CDATA[	public static function GetRelationQueries($sRelCode){return parent::GetRelationQueries($sRelCode);} ]]></code>
        </method>
        <method id="DisplayBareRelations">
          <static>false</static>
          <access>public</access>
          <type>Overload-cmdbAbstractObject</type>
          <code><![CDATA[	function DisplayBareRelations(WebPage $oPage, $bEditMode = false)
	{
		parent::DisplayBareRelations($oPage, $bEditMode);

		$sTicketListAttCode = 'tickets_list';

		if (MetaModel::IsValidAttCode(get_class($this), $sTicketListAttCode))
		{
			// Display one list per leaf class (the only way to display the status as of now)

			$oAttDef = MetaModel::GetAttributeDef(get_class($this), $sTicketListAttCode);
			$sLnkClass = $oAttDef->GetLinkedClass();
			$sExtKeyToMe = $oAttDef->GetExtKeyToMe();
			$sExtKeyToRemote = $oAttDef->GetExtKeyToRemote();

			$iTotal = 0;
			$aSearches = array();

			foreach (MetaModel::EnumChildClasses('Ticket') as $sSubClass)
			{
				if (!MetaModel::HasChildrenClasses($sSubClass))
				{
					$sStateAttCode = MetaModel::GetStateAttributeCode($sSubClass);
					if ($sStateAttCode != '')
					{
					    // Todo: base the search condition on operational_status = 'ongoing' for a more flexible behavior
						$oSearch = DBSearch::FromOQL("SELECT $sSubClass AS t JOIN $sLnkClass AS lnk ON lnk.$sExtKeyToRemote = t.id WHERE lnk.$sExtKeyToMe = :myself AND t.$sStateAttCode NOT IN ('rejected', 'resolved', 'closed') AND lnk.impact_code != 'not_impacted'", array('myself' => $this->GetKey()));
						$aSearches[$sSubClass] = $oSearch;

						$oSet = new DBObjectSet($oSearch);
						$oSet->SetShowObsoleteData(utils::ShowObsoleteData());
						$iTotal += $oSet->Count();
					}
				}
			}

			$sCount = ($iTotal > 0) ? ' ('.$iTotal.')' : '';
			$oPage->SetCurrentTab(Dict::S('Class:FunctionalCI/Tab:OpenedTickets').$sCount);

			foreach ($aSearches as $sSubClass => $oSearch)
			{
				$sBlockId = __class__.'_opened_'.$sSubClass;
		
				$oPage->add('<fieldset>');
				$oPage->add('<legend>'.MetaModel::GetName($sSubClass).'</legend>');
				$oBlock = new DisplayBlock($oSearch, 'list', false);
				$oBlock->Display($oPage, $sBlockId, array('menu' => false));
				$oPage->add('</fieldset>');
			}
		}
	}]]></code>
        </method>
      </methods>




      <relations>
        <relation id="impacts">
          <neighbours>

			<neighbour id="functionalcis">
              <attribute>dependent_list</attribute>
            </neighbour>
			

          </neighbours>
        </relation>
      </relations>



    </class>


<!--

**************************************************
The lnkAlternativeToFunctionalCI class documents a connection between an alternative and a the functional CIs that composed the alternative set
**************************************************
-->

<class id="lnkAlternativeToFunctionalCI" _delta="define">
      <parent>cmdbAbstractObject</parent>
      <properties>
        <is_link>1</is_link>
        <category>bizmodel</category>
        <abstract>false</abstract>
        <key_type>autoincrement</key_type>
        <db_table>lnkAlternativeToFunctionalCI</db_table>
        <db_key_field>id</db_key_field>
        <db_final_class_field/>
        <naming>
          <attributes>
            <attribute id="alternative_id"/>
            <attribute id="functionalci_id"/>
          </attributes>
        </naming>
        <display_template/>
        <icon/>
        <reconciliation>
          <attributes>
            <attribute id="alternative_id"/>
            <attribute id="functionalci_id"/>
          </attributes>
        </reconciliation>
      </properties>
      <fields>
        <field id="alternative_id" xsi:type="AttributeExternalKey">
          <sql>alternative_id</sql>
          <target_class>Alternative</target_class>
          <is_null_allowed>false</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="alternative_name" xsi:type="AttributeExternalField">
          <extkey_attcode>alternative_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="functionalci_id" xsi:type="AttributeExternalKey">
          <sql>functionalci_id</sql>
          <target_class>FunctionalCI</target_class>
          <is_null_allowed>false</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="functionalci_name" xsi:type="AttributeExternalField">
          <extkey_attcode>functionalci_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
      </fields>
      <methods/>
      <presentation>
        <details>
          <items>
            <item id="alternative_id">
              <rank>10</rank>
            </item>
            <item id="functionalci_id">
              <rank>20</rank>
            </item>
          </items>
        </details>
        <search>
          <items>
            <item id="alternative_id">
              <rank>10</rank>
            </item>
            <item id="functionalci_id">
              <rank>20</rank>
            </item>
          </items>
        </search>
        <list>
          <items>
            <item id="alternative_id">
              <rank>10</rank>
            </item>
            <item id="functionalci_id">
              <rank>20</rank>
            </item>
          </items>
        </list>
      </presentation>
    </class>

<!--

**************************************************
The lnkDependentCIToAlternative class documents a connection between a Functional CI and the alternative(s) that are required for it
**************************************************
-->

<class id="lnkDependentCIToAlternative" _delta="define">
      <parent>cmdbAbstractObject</parent>
      <properties>
        <is_link>1</is_link>
        <category>bizmodel</category>
        <abstract>false</abstract>
        <key_type>autoincrement</key_type>
        <db_table>lnkDependentCIToAlternative</db_table>
        <db_key_field>id</db_key_field>
        <db_final_class_field/>
        <naming>
          <attributes>
            <attribute id="alternative_id"/>
            <attribute id="functionalci_id"/>
          </attributes>
        </naming>
        <display_template/>
        <icon/>
        <reconciliation>
          <attributes>
            <attribute id="alternative_id"/>
            <attribute id="functionalci_id"/>
          </attributes>
        </reconciliation>
      </properties>
      <fields>
        <field id="alternative_id" xsi:type="AttributeExternalKey">
          <sql>alternative_id</sql>
          <target_class>Alternative</target_class>
          <is_null_allowed>false</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="alternative_name" xsi:type="AttributeExternalField">
          <extkey_attcode>alternative_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
        <field id="functionalci_id" xsi:type="AttributeExternalKey">
          <sql>functionalci_id</sql>
          <target_class>FunctionalCI</target_class>
          <is_null_allowed>false</is_null_allowed>
          <on_target_delete>DEL_AUTO</on_target_delete>
        </field>
        <field id="functionalci_name" xsi:type="AttributeExternalField">
          <extkey_attcode>functionalci_id</extkey_attcode>
          <target_attcode>name</target_attcode>
        </field>
      </fields>
      <methods/>
      <presentation>
        <details>
          <items>
            <item id="alternative_id">
              <rank>10</rank>
            </item>
            <item id="functionalci_id">
              <rank>20</rank>
            </item>
          </items>
        </details>
        <search>
          <items>
            <item id="alternative_id">
              <rank>10</rank>
            </item>
            <item id="functionalci_id">
              <rank>20</rank>
            </item>
          </items>
        </search>
        <list>
          <items>
            <item id="alternative_id">
              <rank>10</rank>
            </item>
            <item id="functionalci_id">
              <rank>20</rank>
            </item>
          </items>
        </list>
      </presentation>
    </class>
<!--

**************************************************
Add the alternative object relations to FunctionalCI
**************************************************
-->

<class id="FunctionalCI" _delta="must_exist">

      <fields>
<!--

			**************************************************
			This is used to link the functional CI to any Alternative objects that use it
			**************************************************
-->

        <field id="alternative_list" xsi:type="AttributeLinkedSetIndirect" _delta="define">
          <linked_class>lnkAlternativeToFunctionalCI</linked_class>
          <ext_key_to_me>functionalci_id</ext_key_to_me>
          <count_min>0</count_min>
          <count_max>0</count_max>
          <ext_key_to_remote>alternative_id</ext_key_to_remote>
          <duplicates/>
        </field>
<!--

			**************************************************
			This is used to identify the Alternatives the object is dependent upon

			**************************************************
-->

        <field id="requiredalternatives_list" xsi:type="AttributeLinkedSetIndirect" _delta="define">
          <linked_class>lnkDependentCIToAlternative</linked_class>
          <ext_key_to_me>functionalci_id</ext_key_to_me>
          <count_min>0</count_min>
          <count_max>0</count_max>
          <ext_key_to_remote>alternative_id</ext_key_to_remote>
          <duplicates/>
        </field>



<!--
			**************************************************
			This is used to set the number of Alternatives that must be active - it's always all since 
			we need to have every attached Alternative met
			**************************************************
-->

        <field id="alternativesRequired" xsi:type="AttributeRedundancySettings" _delta="define">
          <sql>alternativesrequired</sql>
          <relation_code>impacts</relation_code>
          <from_class>Alternative</from_class>
          <neighbour_id>dependentcis</neighbour_id>
          <enabled>false</enabled>
          <enabled_mode>user</enabled_mode>
          <min_up>1</min_up>
          <min_up_mode>user</min_up_mode>
          <min_up_type>count</min_up_type>
        </field>

      </fields>

      <relations>
        <relation id="impacts">
          <neighbours>

<!--

			**************************************************
			This is used to select the alternatives in which this object is a participant
			**************************************************
-->

	   <neighbour id="functionalcis" _delta="define">
              <attribute>alternative_list</attribute>
            </neighbour>
          </neighbours>
        </relation>
      </relations>
</class>


	
	  </classes>


  <menus>

 
    <menu id="Alternatives" xsi:type="OQLMenuNode" _delta="define">
      <rank>9</rank>
      <parent>ConfigManagement</parent>
      <oql>SELECT Alternative</oql>
      <do_search>0</do_search>
    </menu>

  </menus>
  <user_rights>
    <groups>
    </groups>
    <profiles>
    </profiles>
  </user_rights>
</itop_design>